{"version":3,"sources":["components/ToDoList.module.css","serviceWorker.ts","state/todolistsReducer.ts","state/tasksReducer.ts","state/store.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/ToDoList.tsx","AppWithRedux.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","v1","rootReducer","combineReducers","todoLists","state","action","type","filter","t","id","todoListId","title","todoList","find","tl","value","tasks","stateCopy","filteredTasks","taskElement","newTask","newTaskTitle","isDone","newTasks","todoListTasks","map","store","createStore","AddItemForm","React","memo","props","console","log","useState","setNewTaskTitle","error","setError","onClickAddHandler","trim","addItem","TextField","label","helperText","onKeyPress","e","charCode","onChange","currentTarget","IconButton","color","className","obj","add_btn","onClick","ControlPoint","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onChangeTitle","onDoubleClick","Task","onRemoveTaskHandler","useCallback","removeTask","task","onChangeCheckBoxHandler","changeTaskStatus","checked","changeTaskTitle","is_done","Checkbox","inputProps","aria-label","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onRemoveTodoListClickHandler","removeTodoList","onChangeTodoListTitle","changeTodoListTitle","addTask","tasksForToDoList","key","Button","variant","AppWithRedux","useSelector","dispatch","useDispatch","changeTodoListFilterAC","addTodoList","todoListTitle","changeTodoListTitleAC","removeTaskAC","changeTaskTitleAC","isChecked","changeTaskStatusAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tasksForTodoList","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.053e06bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ToDoList_error__q9bxq\",\"error_message\":\"ToDoList_error_message__uv9gU\",\"add_btn\":\"ToDoList_add_btn__3pzOX\",\"filter_btn\":\"ToDoList_filter_btn__18yEB\",\"active_filter\":\"ToDoList_active_filter__z5aGl\",\"is_done\":\"ToDoList_is_done__1LYDY\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {FilterValueType, TodoListsType} from \"../AppWithRedux\";\r\n\r\n\r\nexport let todoListId1 = v1();\r\nexport let todoListId2 = v1();\r\nconst initialState: Array<TodoListsType> = [\r\n    // {id: todoListId1, title: 'What to learn', filter: 'all'},\r\n    // {id: todoListId2, title: 'What to buy', filter: 'all'},\r\n]\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    value: FilterValueType\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTodoListActionType | AddTodoListActionType | ChangeTodoListTitleActionType | ChangeTodoListFilterActionType;\r\n\r\nexport const todoListsReducer = (state: Array<TodoListsType> = initialState, action: ActionType): Array<TodoListsType> => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter((t: TodoListsType) => t.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [\r\n                {id: action.todoListId, title: action.title, filter: 'all'},\r\n                ...state\r\n            ]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n            }\r\n            return [\r\n                ...state\r\n            ]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todoList = state.find(t => t.id === action.id);\r\n            if (todoList) {\r\n                todoList.filter = action.value;\r\n            }\r\n            return [\r\n                ...state\r\n\r\n            ]\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodoListAC = (todolistId: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodoListFilterAC = (id: string, value: FilterValueType): ChangeTodoListFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, value: value}\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\nimport {AddTodoListActionType} from \"./todolistsReducer\";\r\nimport {TasksStateType} from \"../AppWithRedux\";\r\n\r\n\r\ntype StateType = TasksStateType\r\n\r\n\r\nconst initialState: StateType = {\r\n    // [todoListId1]: [\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //     {id: v1(), title: \"Redux\", isDone: false},\r\n    // ],\r\n    // [todoListId2]: [\r\n    //     {id: v1(), title: \"New\", isDone: false},\r\n    //     {id: v1(), title: \"Yahooo\", isDone: false},\r\n    //     {id: v1(), title: \"EEEEE\", isDone: true},\r\n    //     {id: v1(), title: \"Veeee\", isDone: false},\r\n    // ],\r\n}\r\n\r\ntype ActionTypes =\r\n    RemoveTaskACType\r\n    | AddTaskACType\r\n    | ChangeTaskStatusACType\r\n    | ChangeTaskTitleACType\r\n    | AddTodoListActionType\r\n    | RemoveTodolistACType\r\n\r\n\r\nexport const tasksReducer = (state: StateType = initialState, action: ActionTypes): StateType => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todoListId];\r\n            const filteredTasks = tasks.filter(taskElement => action.id !== taskElement.id);\r\n            stateCopy[action.todoListId] = filteredTasks\r\n\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask = {id: v1(), title: action.newTaskTitle, isDone: false};\r\n            let newTasks = [newTask, ...stateCopy[action.todoListId]];\r\n            stateCopy[action.todoListId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todoListTasks = state[action.todoListId];\r\n            state[action.todoListId] = todoListTasks.map(t => t.id === action.id ? {...t, isDone: action.isDone} : t);\r\n            return ({...state})\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todoListTasks = state[action.todoListId];\r\n            state[action.todoListId] = todoListTasks.map(t => t.id === action.id ? {...t, title: action.title} : t);\r\n            return ({...state})\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport type RemoveTaskACType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListId: string\r\n}\r\nexport type AddTaskACType = {\r\n    type: 'ADD-TASK'\r\n    newTaskTitle: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusACType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    id: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleACType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    id: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type RemoveTodolistACType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskACType => {\r\n    return {type: 'REMOVE-TASK', id: id, todoListId: todoListId}\r\n}\r\nexport const addTaskAC = (newTaskTitle: string, todoListId: string): AddTaskACType => {\r\n    return {type: 'ADD-TASK', newTaskTitle: newTaskTitle, todoListId: todoListId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todoListId: string): ChangeTaskStatusACType => {\r\n    return {type: 'CHANGE-TASK-STATUS', id: id, isDone: isDone, todoListId: todoListId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (id: string, title: string, todoListId: string): ChangeTaskTitleACType => {\r\n    return {type: 'CHANGE-TASK-TITLE', id: id, title: title, todoListId: todoListId}\r\n}\r\n\r\nexport const removeTodoListAC = (id: string): RemoveTodolistACType => {\r\n    return {type: 'REMOVE-TODOLIST', id: id}\r\n}\r\n\r\n\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from \"./todolistsReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\n\r\nexport type AppRootType=ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\n// type AppRootState={\r\n//     todoLists:Array<TodoListsType>,\r\n//     tasks:TasksStateType\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport obj from \"./ToDoList.module.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    console.log('AddItemForm')\r\n\r\n    let [newTaskTitle, setNewTaskTitle] = useState('');\r\n    let [error, setError] = useState<null | string>(null);\r\n\r\n    const onEnterPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            onClickAddHandler();\r\n        }\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        setNewTaskTitle(e.currentTarget.value);\r\n    }\r\n    const onClickAddHandler = () => {\r\n        setNewTaskTitle('');\r\n        if (newTaskTitle.trim() === '') {\r\n            setError('Title is required');\r\n            return\r\n        }\r\n        props.addItem(newTaskTitle);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input className={error ? obj.error : ''} onKeyPress={onEnterPressHandler} onChange={onChangeInputHandler}*/}\r\n            {/*       value={newTaskTitle}/>*/}\r\n            <TextField id=\"standard-basic\"\r\n                       label=\"Type text\"\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       onKeyPress={onEnterPressHandler}\r\n                       onChange={onChangeInputHandler}\r\n                       value={newTaskTitle}\r\n            />\r\n            {/*<button className={obj.add_btn} onClick={onClickAddHandler}>+</button>*/}\r\n            <IconButton\r\n                color={\"primary\"}\r\n                className={obj.add_btn}\r\n                onClick={onClickAddHandler}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={obj.error_message}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('editableSpan')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onSpanDblClick = () => {\r\n        setTitle(props.title);\r\n        setEditMode(true);\r\n    }\r\n    const onInputBlur = () => {\r\n        setEditMode(false);\r\n        if (title.trim()) {\r\n            props.onChangeTitle(title);\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <TextField autoFocus value={title} onChange={onInputChange} onBlur={onInputBlur}/>\r\n                    :\r\n                    <span onDoubleClick={onSpanDblClick}>{props.title}</span>\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport obj from \"./ToDoList.module.css\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../AppWithRedux\";\r\n\r\ntype TaskPropsType = {\r\n    todoListId: string\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isChecked: boolean, todoListId: string) => void\r\n    task: TaskType\r\n    filter: 'all' | 'completed' | 'active'\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n\r\n    const onRemoveTaskHandler = useCallback(() => props.removeTask(props.task.id, props.todoListId),\r\n        [props.removeTask, props.task.id, props.todoListId]);\r\n    const onChangeCheckBoxHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todoListId),\r\n        [props.changeTaskStatus, props.task.id, props.todoListId])\r\n\r\n    const onChangeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\r\n    return (\r\n        <div className={props.filter !== 'completed' && props.task.isDone ? obj.is_done : ''}>\r\n            <Checkbox\r\n                checked={props.task.isDone}\r\n                onChange={onChangeCheckBoxHandler}\r\n                value=\"checkedA\"\r\n                inputProps={{'aria-label': 'Checkbox A'}}\r\n            />\r\n            <EditableSpan title={props.task.title} onChangeTitle={onChangeTitle}/>\r\n            <IconButton onClick={onRemoveTaskHandler} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {FilterValueType, TaskType} from \"../AppWithRedux\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValueType, id: string) => void\r\n    filter: 'all' | 'completed' | 'active'\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n    addTask: (title: string, id: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isChecked: boolean, todoListId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    console.log('todoList')\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id]);\r\n    const onRemoveTodoListClickHandler = useCallback(() => props.removeTodoList(props.id), [props.removeTodoList, props.id])\r\n    const onChangeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(props.id, title), [props.changeTodoListTitle, props.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id]);\r\n\r\n\r\n    let tasksForToDoList = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return !t.isDone\r\n        });\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return t.isDone\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodoListClickHandler} aria-label=\"delete\">\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(t => {\r\n                        return <Task key={t.id}\r\n                                     task={t}\r\n                                     changeTaskStatus={props.changeTaskStatus}\r\n                                     changeTaskTitle={props.changeTaskTitle}\r\n                                     filter={props.filter}\r\n                                     removeTask={props.removeTask}\r\n                                     todoListId={props.id}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"}\r\n                        variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './components/ToDoList';\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC,\r\n} from \"./state/todolistsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"./state/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasksReducer\";\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    title: string;\r\n    isDone: boolean;\r\n}\r\n\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValueType = 'all' | 'completed' | 'active';\r\n\r\n\r\nconst AppWithRedux = React.memo(() => {\r\n    console.log('AppWithRedux')\r\n\r\n    const todoLists = useSelector<AppRootType, Array<TodoListsType>>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const changeFilter = useCallback((value: FilterValueType, id: string) => {\r\n        dispatch(changeTodoListFilterAC(id, value))\r\n    }, [dispatch]);\r\n    const removeTodoList = useCallback((id: string) => {\r\n        let action = removeTodoListAC(id)\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        let action = addTodoListAC(todoListTitle);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodoListTitleAC(id, title))\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((title: string, id: string) => {\r\n        dispatch(addTaskAC(title, id))\r\n    }, [dispatch]);\r\n    const removeTask = useCallback((id: string, todoListId: string) => {\r\n        dispatch(removeTaskAC(id, todoListId))\r\n    }, [dispatch]);\r\n    const changeTaskTitle = useCallback((id: string, title: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(id, title, todoListId))\r\n    }, [dispatch]);\r\n    const changeTaskStatus = useCallback((id: string, isChecked: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isChecked, todoListId))\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '10px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n\r\n                        let tasksForTodoList = tasks[tl.id];\r\n                        return (\r\n                            <Grid key={tl.id} item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist key={tl.id}\r\n                                              id={tl.id}\r\n                                              title={tl.title}\r\n                                              tasks={tasksForTodoList}\r\n                                              filter={tl.filter}\r\n                                              changeFilter={changeFilter}\r\n                                              removeTodoList={removeTodoList}\r\n                                              changeTodoListTitle={changeTodoListTitle}\r\n                                              addTask={addTask}\r\n                                              removeTask={removeTask}\r\n                                              changeTaskTitle={changeTaskTitle}\r\n                                              changeTaskStatus={changeTaskStatus}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                        )\r\n\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    // </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}