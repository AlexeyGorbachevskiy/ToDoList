{"version":3,"sources":["serviceWorker.ts","api/todoListsAPI.ts","utils/errorUtils.ts","state/authReducer.ts","state/appReducer.ts","state/todolistsReducer.ts","state/tasksReducer.ts","state/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/ToDoList.tsx","features/TodoListsList/TodoListsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","App.tsx","index.tsx","features/TodoListsList/TodoList/ToDoList.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","todolistId","delete","put","todoListId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","SetErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","v1","updateTaskThunkCreator","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","updateTaskAC","catch","console","warn","rootReducer","combineReducers","todoLists","state","action","filter","todoList","entityStatus","map","tl","taskElement","stateCopy","forEach","app","login","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","disabled","props","useState","newTaskTitle","setNewTaskTitle","setError","onClickAddHandler","trim","addItem","TextField","label","helperText","onKeyPress","e","charCode","onChange","currentTarget","IconButton","color","className","obj","add_btn","onClick","ControlPoint","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onChangeTitle","onDoubleClick","Task","onRemoveTaskHandler","useCallback","removeTask","onChangeCheckBoxHandler","changeTaskStatus","checked","Completed","New","changeTaskTitle","is_done","Checkbox","inputProps","aria-label","Delete","Todolist","demo","useDispatch","useEffect","setTasksAC","items","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onRemoveTodoListClickHandler","removeTodoList","onChangeTodoListTitle","changeTodoListTitle","addTask","tasksForToDoList","key","Button","variant","TodoLists","useSelector","changeTodoListFilterAC","addTodoList","todoListTitle","item","changeTodoListTitleAC","changeTodoListTitleThunkCreator","addTaskThunkCreator","removeTaskAC","removeTaskThunkCreator","Grid","container","style","padding","spacing","tasksForTodoList","Paper","to","Alert","elevation","ErrorSnackBar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","initialized","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","height","display","justifyContent","alignItems","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f7d1e6ba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3de0712e-e19a-4637-bf5e-355c7a8ad46c'\r\n    }\r\n})\r\n\r\n\r\n//api\r\nexport const todoListsAPI = {\r\n\r\n    getTodoLists() {\r\n        return axiosInstance.get<TodoListType[]>('todo-lists')\r\n    },\r\n\r\n    createTodoList(title: string) {\r\n        return axiosInstance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n\r\n    deleteTodoList(todolistId: string) {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return axiosInstance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n\r\n    getTasks(todoListId: string) {\r\n        const promise = axiosInstance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n\r\n    createTask(todoListId: string, title: string) {\r\n        const promise = axiosInstance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title: title});\r\n        return promise\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n\r\n    //UpdateTaskModelType\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        const promise = axiosInstance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n        return promise\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return axiosInstance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return axiosInstance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me');\r\n    },\r\n    logout() {\r\n        return axiosInstance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import {SetAppErrorACType, setAppStatusAC, SetAppStatusACType, SetErrorAC} from \"../state/appReducer\";\r\nimport {ResponseType} from '../api/todoListsAPI'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType, dispatch: Dispatch<SetAppErrorACType | SetAppStatusACType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(SetErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(SetErrorAC('Entered text length must be less than 101 symbol'))\r\n    }\r\n    // progressBar\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorACType | SetAppStatusACType>) => {\r\n    dispatch(SetErrorAC(error.message ? error.message : 'Some error is occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from \"redux\";\r\nimport {SetAppErrorACType, setAppStatusAC, SetAppStatusACType} from \"./appReducer\";\r\nimport {authAPI, LoginParamsType} from \"../api/todoListsAPI\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorUtils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ActionTypes =\r\n    ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'login/SET-IS-LOGGED-IN': {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.value\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// actions\r\n\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => {\r\n    return ({type: 'login/SET-IS-LOGGED-IN', value: value} as const)\r\n}\r\n\r\n\r\n//thunks\r\nexport const loginThunkCreator = (data: LoginParamsType) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppStatusACType | SetAppErrorACType>) => {\r\n\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            authAPI.login(data)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setIsLoggedInAC(true))\r\n                        // progressBar\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n\r\n\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n\r\n        }\r\n    )\r\n}\r\n\r\nexport const logoutThunkCreator = () => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppStatusACType | SetAppErrorACType>) => {\r\n\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            authAPI.logout()\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setIsLoggedInAC(false))\r\n                        // progressBar\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n\r\n\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n\r\n        }\r\n    )\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todoListsAPI\";\r\nimport {setIsLoggedInAC} from \"./authReducer\";\r\n\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialStateType = {\r\n    // is interaction with server occur now?\r\n    status: StatusType,\r\n    // if error will occurred - text of error will written to this var\r\n    error: string | null,\r\n    isInitialized: boolean,\r\n}\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nexport type SetAppErrorACType = ReturnType<typeof SetErrorAC>;\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>;\r\ntype ActionTypes = SetAppErrorACType | SetAppStatusACType | ReturnType<typeof setAppInitializedAC>\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case'APP/SET-INITIALIZED': {\r\n            return {\r\n                ...state,\r\n                isInitialized: action.value\r\n            }\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\nexport const SetErrorAC = (error: string | null) => {\r\n    return ({type: 'SET-ERROR', error: error} as const)\r\n}\r\n\r\nexport const setAppStatusAC = (status: StatusType) => {\r\n    return ({type: 'SET-STATUS', status: status} as const)\r\n}\r\n\r\nexport const setAppInitializedAC = (value: boolean) => {\r\n    return ({type: 'APP/SET-INITIALIZED', value} as const)\r\n}\r\n\r\n\r\nexport const initializeAppThunkCreator = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me().then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            }\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SetAppErrorACType, setAppStatusAC, SetAppStatusACType, StatusType} from \"./appReducer\";\r\nimport {todoListsAPI, TodoListType} from \"../api/todoListsAPI\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorUtils\";\r\n\r\n\r\nexport let todoListId1 = v1();\r\nexport let todoListId2 = v1();\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type FilterValueType = 'all' | 'completed' | 'active';\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValueType\r\n    entityStatus: StatusType\r\n}\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>;\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>;\r\n\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof changeTodoListEntityStatus>;\r\n\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionTypes): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter((t: TodoListDomainType) => t.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [\r\n                {...action.todoList, filter: 'all', entityStatus: 'idle'},\r\n                ...state\r\n            ]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.value} : tl)\r\n        }\r\n\r\n        case 'SET-TODOLISTS': {\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTodoListAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList: todoList} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: id,\r\n    title: title\r\n} as const)\r\nexport const changeTodoListFilterAC = (id: string, value: FilterValueType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: id,\r\n    value: value\r\n} as const)\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todoLists: todoLists\r\n} as const)\r\nexport const changeTodoListEntityStatus = (id: string, status: StatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id: id,\r\n    status\r\n} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsThunkCreator = () => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppStatusACType | SetAppErrorACType>) => {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todoListsAPI.getTodoLists()\r\n                .then((res) => {\r\n                    dispatch(setTodoListsAC(res.data))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\nexport const removeTodoListThunkCreator = (todoListId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppStatusACType>) => {\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTodoListEntityStatus(todoListId, 'loading'))\r\n            todoListsAPI.deleteTodoList(todoListId)\r\n                .then((res) => {\r\n                    dispatch(removeTodoListAC(todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\nexport const addTodoListThunkCreator = (title: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppStatusACType | SetAppErrorACType>) => {\r\n\r\n            //progressBar\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            todoListsAPI.createTodoList(title)\r\n                .then((res) => {\r\n\r\n\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(addTodoListAC(res.data.data.item))\r\n                        //progressBar\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\nexport const changeTodoListTitleThunkCreator = (id: string, title: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.updateTodolist(id, title)\r\n                .then((res) => {\r\n                    dispatch(changeTodoListTitleAC(id, title))\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\n","import {AddTodoListActionType, SetTodoListsActionType} from \"./todolistsReducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from \"../api/todoListsAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootType} from \"./store\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {SetErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType, StatusType} from \"./appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorUtils\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\ntype ActionTypes =\r\n    RemoveTaskACType\r\n    | AddTaskACType\r\n    | UpdateTaskActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodolistACType\r\n    | SetTodoListsActionType\r\n    | SetTasksACType\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(taskElement => action.id !== taskElement.id),\r\n            }\r\n\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.id ? {...t, ...action.model} : t),\r\n            }\r\n\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = [];\r\n            })\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks,\r\n            }\r\n        }\r\n\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// actions\r\n\r\nexport type RemoveTaskACType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListId: string\r\n}\r\nexport type AddTaskACType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\nexport type UpdateTaskActionType = {\r\n    type: 'UPDATE-TASK'\r\n    id: string\r\n    model: UpdateDomainTaskModelType\r\n    todoListId: string\r\n}\r\n\r\n\r\nexport type RemoveTodolistACType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type SetTasksACType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todoListId: string\r\n}\r\n\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskACType => {\r\n    return {type: 'REMOVE-TASK', id: id, todoListId: todoListId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskACType => {\r\n    return {type: 'ADD-TASK', task: task}\r\n}\r\n\r\nexport const updateTaskAC = (id: string, model: UpdateDomainTaskModelType, todoListId: string): UpdateTaskActionType => {\r\n    return {type: 'UPDATE-TASK', id: id, model: model, todoListId: todoListId}\r\n}\r\n\r\n\r\nexport const removeTodoListAC = (id: string): RemoveTodolistACType => {\r\n    return {type: 'REMOVE-TODOLIST', id: id}\r\n}\r\n\r\nexport const setTasksAC = (tasks: TaskType[], todoListId: string): SetTasksACType => {\r\n    return {type: 'SET-TASKS', tasks: tasks, todoListId: todoListId}\r\n}\r\n\r\n\r\n//thunks\r\nexport const fetchTasksThunkCreator = (todoListId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppStatusACType>) => {\r\n            dispatch(setAppStatusAC('loading'))\r\n            todoListsAPI.getTasks(todoListId)\r\n                .then((res) => {\r\n                    dispatch(setTasksAC(res.data.items, todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\nexport const removeTaskThunkCreator = (todoListId: string, taskId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppStatusACType>) => {\r\n            // progressBar\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            todoListsAPI.deleteTask(todoListId, taskId)\r\n                .then((res) => {\r\n                    dispatch(removeTaskAC(taskId, todoListId))\r\n                    // progressBar\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\nexport const addTaskThunkCreator = (todoListId: string, title: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppErrorACType | SetAppStatusACType>) => {\r\n\r\n            // progressBar\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            todoListsAPI.createTask(todoListId, title)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(addTaskAC(res.data.data.item))\r\n\r\n                        // progressBar\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskThunkCreator = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes | SetAppErrorACType | SetAppStatusACType>, getState: () => AppRootType) => {\r\n            const state = getState();\r\n            const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n\r\n            if (!task) {\r\n                console.warn('Task is not found in the state');\r\n                return;\r\n            }\r\n\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                title: task.title,\r\n                status: task.status,\r\n                ...domainModel\r\n\r\n            }\r\n            // progressBar\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            todoListsAPI.updateTask(todoListId, taskId, apiModel)\r\n                .then((res) => {\r\n\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todoListId))\r\n                        // progressBar\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n\r\n\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from \"./todolistsReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\n\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\n\r\n// type AppRootState={\r\n//     todoLists:Array<TodoListsType>,\r\n//     tasks:TasksStateType\r\n// }\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport obj from \"../../features/TodoListsList/TodoList/ToDoList.module.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(({disabled = false, ...props}: AddItemFormPropsType) => {\r\n\r\n\r\n    let [newTaskTitle, setNewTaskTitle] = useState('');\r\n    let [error, setError] = useState<null | string>(null);\r\n\r\n    const onEnterPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            onClickAddHandler();\r\n        }\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        setNewTaskTitle(e.currentTarget.value);\r\n    }\r\n    const onClickAddHandler = () => {\r\n        setNewTaskTitle('');\r\n        if (newTaskTitle.trim() === '') {\r\n            setError('Title is required');\r\n            return\r\n        }\r\n        props.addItem(newTaskTitle);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input className={error ? obj.error : ''} onKeyPress={onEnterPressHandler} onChange={onChangeInputHandler}*/}\r\n            {/*       value={newTaskTitle}/>*/}\r\n            <TextField disabled={disabled}\r\n                       id=\"standard-basic\"\r\n                       label=\"Type text\"\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       onKeyPress={onEnterPressHandler}\r\n                       onChange={onChangeInputHandler}\r\n                       value={newTaskTitle}\r\n            />\r\n            {/*<button className={obj.add_btn} onClick={onClickAddHandler}>+</button>*/}\r\n            <IconButton\r\n                disabled={disabled}\r\n                color={\"primary\"}\r\n                className={obj.add_btn}\r\n                onClick={onClickAddHandler}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={obj.error_message}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onSpanDblClick = () => {\r\n        setTitle(props.title);\r\n        setEditMode(true);\r\n    }\r\n    const onInputBlur = () => {\r\n        setEditMode(false);\r\n        if (title.trim()) {\r\n            props.onChangeTitle(title);\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <TextField autoFocus value={title} onChange={onInputChange} onBlur={onInputBlur}/>\r\n                    :\r\n                    <span onDoubleClick={onSpanDblClick}>{props.title}</span>\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport obj from \"../ToDoList.module.css\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todoListsAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    todoListId: string\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    task: TaskType\r\n    filter: 'all' | 'completed' | 'active'\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n\r\n    const onRemoveTaskHandler = useCallback(() => props.removeTask(props.task.id, props.todoListId),\r\n        [props.removeTask, props.task.id, props.todoListId]);\r\n    const onChangeCheckBoxHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId),\r\n        [props.changeTaskStatus, props.task.id, props.todoListId])\r\n\r\n    const onChangeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\r\n    return (\r\n        <div className={props.filter !== 'completed' && props.task.status===TaskStatuses.Completed ? obj.is_done : ''}>\r\n            <Checkbox\r\n                checked={props.task.status===TaskStatuses.Completed}\r\n                onChange={onChangeCheckBoxHandler}\r\n                value=\"checkedA\"\r\n                inputProps={{'aria-label': 'Checkbox A'}}\r\n            />\r\n            <EditableSpan title={props.task.title} onChangeTitle={onChangeTitle}/>\r\n            <IconButton onClick={onRemoveTaskHandler} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todoListsAPI\";\r\nimport {fetchTodoListsThunkCreator, FilterValueType, TodoListDomainType} from \"../../../state/todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksThunkCreator} from \"../../../state/tasksReducer\";\r\n\r\n\r\nexport type PropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValueType, id: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n    addTask: (title: string, id: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksThunkCreator(props.todoList.id));\r\n\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todoList.id), [props.changeFilter, props.todoList.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todoList.id), [props.changeFilter, props.todoList.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todoList.id), [props.changeFilter, props.todoList.id]);\r\n    const onRemoveTodoListClickHandler = useCallback(() => props.removeTodoList(props.todoList.id), [props.removeTodoList, props.todoList.id])\r\n    const onChangeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(props.todoList.id, title), [props.changeTodoListTitle, props.todoList.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todoList.id)\r\n    }, [props.addTask, props.todoList.id]);\r\n\r\n\r\n    let tasksForToDoList = props.tasks;\r\n\r\n    if (props.todoList.filter === 'active') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return t.status === TaskStatuses.New\r\n        });\r\n    }\r\n    if (props.todoList.filter === 'completed') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return t.status === TaskStatuses.Completed\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todoList.title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodoListClickHandler} aria-label=\"delete\"\r\n                            disabled={props.todoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todoList.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(t => {\r\n                        return <Task key={t.id}\r\n                                     task={t}\r\n                                     changeTaskStatus={props.changeTaskStatus}\r\n                                     changeTaskTitle={props.changeTaskTitle}\r\n                                     filter={props.todoList.filter}\r\n                                     removeTask={props.removeTask}\r\n                                     todoListId={props.todoList.id}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todoList.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.todoList.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"}\r\n                        variant={props.todoList.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../state/store\";\r\nimport {\r\n    addTodoListThunkCreator,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleThunkCreator,\r\n    fetchTodoListsThunkCreator,\r\n    FilterValueType,\r\n    removeTodoListThunkCreator,\r\n    TodoListDomainType\r\n} from \"../../state/todolistsReducer\";\r\nimport {addTaskThunkCreator, removeTaskThunkCreator, updateTaskThunkCreator} from \"../../state/tasksReducer\";\r\nimport {TaskStatuses} from \"../../api/todoListsAPI\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./TodoList/ToDoList\";\r\nimport {TasksStateType} from \"../../App\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype TodoListsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst TodoLists: React.FC<TodoListsListPropsType> = ({demo = false, ...props}) => {\r\n\r\n    const todoLists = useSelector<AppRootType, Array<TodoListDomainType>>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootType, boolean>(state => state.login.isLoggedIn);\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsThunkCreator());\r\n    }, [])\r\n\r\n\r\n    const changeFilter = useCallback((value: FilterValueType, id: string) => {\r\n        dispatch(changeTodoListFilterAC(id, value))\r\n    }, [dispatch]);\r\n    const removeTodoList = useCallback((id: string) => {\r\n        let action = removeTodoListThunkCreator(id)\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        let action = addTodoListThunkCreator(todoListTitle);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodoListTitleThunkCreator(id, title))\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskThunkCreator(todoListId, title))\r\n    }, [dispatch]);\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        dispatch(removeTaskThunkCreator(todoListId, taskId))\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((id: string, title: string, todoListId: string) => {\r\n        dispatch(updateTaskThunkCreator(id, {title: title}, todoListId))\r\n    }, [dispatch]);\r\n\r\n    const changeTaskStatus = useCallback((id: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTaskThunkCreator(id, {status: status}, todoListId))\r\n    }, [dispatch]);\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to='/login'/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '10px'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todoLists.map(tl => {\r\n\r\n                    let tasksForTodoList = tasks[tl.id];\r\n                    return (\r\n                        <Grid key={tl.id} item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist key={tl.id}\r\n                                          todoList={tl}\r\n                                          tasks={tasksForTodoList}\r\n                                          changeFilter={changeFilter}\r\n                                          removeTodoList={removeTodoList}\r\n                                          changeTodoListTitle={changeTodoListTitle}\r\n                                          addTask={addTask}\r\n                                          removeTask={removeTask}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n                                          demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n\r\n                    )\r\n\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoLists;","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../state/store\";\r\nimport {SetErrorAC} from \"../../state/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport function ErrorSnackBar() {\r\n    // const [open, setOpen] = React.useState(true);\r\n    const error = useSelector<AppRootType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(SetErrorAC(null))\r\n        // setOpen(false);\r\n    };\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunkCreator} from \"../../state/authReducer\";\r\nimport {AppRootType} from \"../../state/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppRootType, boolean>(state => state.login.isLoggedIn);\r\n\r\n\r\n    const formik = useFormik({\r\n\r\n\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginThunkCreator(values))\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify={'center'}>\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                            target={'_blank'}>here</a>\r\n                            </p>\r\n                            <p>\r\n                                Or ask me for my own credentials...\r\n                            </p>\r\n                            {/*<p>*/}\r\n                            {/*    or use common test account credentials:*/}\r\n                            {/*</p>*/}\r\n                            {/*<p> Email: free@samuraijs.com*/}\r\n                            {/*</p>*/}\r\n                            {/*<p>*/}\r\n                            {/*    Password: free*/}\r\n                            {/*</p>*/}\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TaskType} from \"./api/todoListsAPI\";\nimport TodoLists from \"./features/TodoListsList/TodoListsList\";\nimport {ErrorSnackBar} from \"./components/ErrorSnackBar/ErrorSnackBar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootType} from \"./state/store\";\nimport {initializeAppThunkCreator, StatusType} from \"./state/appReducer\";\nimport {BrowserRouter, Route, Redirect} from \"react-router-dom\";\nimport {Login} from \"./features/Login/Login\";\nimport {logoutThunkCreator} from \"./state/authReducer\";\n\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n\ntype AppPropsType = {\n    demo?: boolean\n}\n\nconst App = React.memo(({demo = false, ...props}: AppPropsType) => {\n\n    const status = useSelector<AppRootType, StatusType>(state => state.app.status);\n    const initialized = useSelector<AppRootType, boolean>(state => state.app.isInitialized);\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootType, boolean>(state => state.login.isLoggedIn);\n\n    useEffect(() => {\n        dispatch(initializeAppThunkCreator())\n    }, [])\n\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutThunkCreator())\n    }, []);\n\n    if (!initialized) {\n        return (\n            <div style={{height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                <CircularProgress/>\n            </div>\n        )\n    }\n\n\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <ErrorSnackBar/>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n                        <Typography variant=\"h6\">\n                            News\n                        </Typography>\n                        {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\n                    </Toolbar>\n                    {\n                        status === 'loading' && <LinearProgress/>\n                    }\n                </AppBar>\n                <Container fixed>\n                    <Route exact path={'/'} render={() => <Redirect to={'/ToDoList'}/>}/>\n                    <Route exact path={'/ToDoList'} render={() => <TodoLists demo={demo}/>}/>\n                    <Route path={'/login'} render={() => <Login/>}/>\n\n                    {/*for Storybook*/}\n                    {demo && <Route path={'/'} render={() => <TodoLists demo={demo}/>}/>}\n                </Container>\n            </div>\n        </BrowserRouter>\n    );\n})\n\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport App from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    // </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ToDoList_error__2_s7a\",\"error_message\":\"ToDoList_error_message__2wJHE\",\"add_btn\":\"ToDoList_add_btn__15G-N\",\"filter_btn\":\"ToDoList_filter_btn__2gnWH\",\"active_filter\":\"ToDoList_active_filter__3hqwS\",\"is_done\":\"ToDoList_is_done__1wQHF\"};"],"sourceRoot":""}