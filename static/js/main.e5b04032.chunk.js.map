{"version":3,"sources":["serviceWorker.ts","api/TodoListsAPI.ts","state/todolistsReducer.ts","state/tasksReducer.ts","state/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/ToDoList.tsx","features/TodoListsList/TodoListsList.tsx","app/App.tsx","index.tsx","features/TodoListsList/TodoList/ToDoList.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","todolistId","delete","put","todoListId","taskId","model","v1","initialState","updateTaskThunkCreator","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","status","then","res","type","updateTaskAC","console","warn","rootReducer","combineReducers","todoLists","state","action","filter","todoList","map","tl","value","taskElement","stateCopy","forEach","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","log","useState","newTaskTitle","setNewTaskTitle","error","setError","onClickAddHandler","trim","addItem","TextField","label","helperText","onKeyPress","e","charCode","onChange","currentTarget","IconButton","color","className","obj","add_btn","onClick","ControlPoint","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onChangeTitle","onDoubleClick","Task","onRemoveTaskHandler","useCallback","removeTask","onChangeCheckBoxHandler","changeTaskStatus","checked","Completed","New","changeTaskTitle","is_done","Checkbox","inputProps","aria-label","Delete","Todolist","useDispatch","useEffect","setTasksAC","data","items","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onRemoveTodoListClickHandler","removeTodoList","onChangeTodoListTitle","changeTodoListTitle","addTask","tasksForToDoList","key","Button","variant","TodoLists","useSelector","changeTodoListFilterAC","addTodoList","todoListTitle","item","changeTodoListTitleAC","changeTodoListTitleThunkCreator","addTaskThunkCreator","removeTaskAC","removeTaskThunkCreator","Grid","container","style","padding","spacing","tasksForTodoList","Paper","App","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.e5b04032.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\n\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3de0712e-e19a-4637-bf5e-355c7a8ad46c'\r\n    }\r\n})\r\n\r\n\r\n//api\r\nexport const todoListsAPI = {\r\n\r\n    getTodoLists() {\r\n        return axiosInstance.get<TodoListType[]>('todo-lists')\r\n    },\r\n\r\n    createTodoList(title: string) {\r\n        return axiosInstance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n\r\n    deleteTodoList(todolistId: string) {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return axiosInstance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n\r\n    getTasks(todoListId: string) {\r\n        const promise = axiosInstance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n\r\n    createTask(todoListId: string, title: string) {\r\n        const promise = axiosInstance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title: title});\r\n        return promise\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        const promise = axiosInstance.put<UpdateTaskModelType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n        return promise\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//types\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {todoListsAPI, TodoListType} from \"../api/TodoListsAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport let todoListId1 = v1();\r\nexport let todoListId2 = v1();\r\nconst initialState: Array<TodoListDomainType> = []\r\nexport type FilterValueType = 'all' | 'completed' | 'active';\r\nexport type TodoListDomainType = TodoListType & { filter: FilterValueType }\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>;\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>;\r\n\r\n\r\ntype ActionTypes =\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof setTodoListsAC>;\r\n\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionTypes): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter((t: TodoListDomainType) => t.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [\r\n                {...action.todoList, filter: 'all'},\r\n                ...state\r\n            ]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.value} : tl)\r\n        }\r\n\r\n        case 'SET-TODOLISTS': {\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all'}))\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTodoListAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList: todoList} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: id,\r\n    title: title\r\n} as const)\r\nexport const changeTodoListFilterAC = (id: string, value: FilterValueType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: id,\r\n    value: value\r\n} as const)\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todoLists: todoLists\r\n} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodoListsThunkCreator = () => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.getTodoLists()\r\n                .then((res) => {\r\n                    dispatch(setTodoListsAC(res.data))\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\nexport const removeTodoListThunkCreator = (todoListId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.deleteTodoList(todoListId)\r\n                .then((res) => {\r\n                    dispatch(removeTodoListAC(todoListId))\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\nexport const addTodoListThunkCreator = (title: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.createTodoList(title)\r\n                .then((res) => {\r\n                    dispatch(addTodoListAC(res.data.data.item))\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\nexport const changeTodoListTitleThunkCreator = (id: string, title: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.updateTodolist(id, title)\r\n                .then((res) => {\r\n                    dispatch(changeTodoListTitleAC(id, title))\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\n","import {AddTodoListActionType, SetTodoListsActionType} from \"./todolistsReducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from \"../api/TodoListsAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootType} from \"./store\";\r\nimport {TasksStateType} from \"../app/App\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\ntype ActionTypes =\r\n    RemoveTaskACType\r\n    | AddTaskACType\r\n    | UpdateTaskActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodolistACType\r\n    | SetTodoListsActionType\r\n    | SetTasksACType\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(taskElement => action.id !== taskElement.id),\r\n            }\r\n\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.id ? {...t, ...action.model} : t),\r\n            }\r\n\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = [];\r\n            })\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks,\r\n            }\r\n        }\r\n\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// actions\r\n\r\nexport type RemoveTaskACType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListId: string\r\n}\r\nexport type AddTaskACType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\nexport type UpdateTaskActionType = {\r\n    type: 'UPDATE-TASK'\r\n    id: string\r\n    model: UpdateDomainTaskModelType\r\n    todoListId: string\r\n}\r\n\r\n\r\nexport type RemoveTodolistACType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type SetTasksACType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todoListId: string\r\n}\r\n\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskACType => {\r\n    return {type: 'REMOVE-TASK', id: id, todoListId: todoListId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskACType => {\r\n    return {type: 'ADD-TASK', task: task}\r\n}\r\n\r\nexport const updateTaskAC = (id: string, model: UpdateDomainTaskModelType, todoListId: string): UpdateTaskActionType => {\r\n    return {type: 'UPDATE-TASK', id: id, model: model, todoListId: todoListId}\r\n}\r\n\r\n\r\nexport const removeTodoListAC = (id: string): RemoveTodolistACType => {\r\n    return {type: 'REMOVE-TODOLIST', id: id}\r\n}\r\n\r\nexport const setTasksAC = (tasks: TaskType[], todoListId: string): SetTasksACType => {\r\n    return {type: 'SET-TASKS', tasks: tasks, todoListId: todoListId}\r\n}\r\n\r\n\r\n//thunks\r\nexport const fetchTasksThunkCreator = (todoListId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.getTasks(todoListId)\r\n                .then((res) => {\r\n                    dispatch(setTasksAC(res.data.items, todoListId))\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\nexport const removeTaskThunkCreator = (todoListId: string, taskId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.deleteTask(todoListId, taskId)\r\n                .then((res) => {\r\n                    dispatch(removeTaskAC(taskId, todoListId))\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\nexport const addTaskThunkCreator = (todoListId: string, title: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>) => {\r\n            todoListsAPI.createTask(todoListId, title)\r\n                .then((res) => {\r\n\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskThunkCreator = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) => {\r\n    return (\r\n        (dispatch: Dispatch<ActionTypes>, getState: () => AppRootType) => {\r\n            const state = getState();\r\n            const task = state.tasks[todoListId].find(t => t.id === taskId);\r\n\r\n            if (!task) {\r\n                console.warn('Task is not found in the state');\r\n                return;\r\n            }\r\n\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                title: task.title,\r\n                status: task.status,\r\n                ...domainModel\r\n\r\n            }\r\n            todoListsAPI.updateTask(todoListId, taskId, apiModel)\r\n                .then((res) => {\r\n\r\n                    dispatch(updateTaskAC(taskId, domainModel, todoListId))\r\n                })\r\n        }\r\n    )\r\n}\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from \"./todolistsReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\n// type AppRootState={\r\n//     todoLists:Array<TodoListsType>,\r\n//     tasks:TasksStateType\r\n// }\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport obj from \"../../features/TodoListsList/TodoList/ToDoList.module.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    console.log('AddItemForm')\r\n\r\n    let [newTaskTitle, setNewTaskTitle] = useState('');\r\n    let [error, setError] = useState<null | string>(null);\r\n\r\n    const onEnterPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            onClickAddHandler();\r\n        }\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        setNewTaskTitle(e.currentTarget.value);\r\n    }\r\n    const onClickAddHandler = () => {\r\n        setNewTaskTitle('');\r\n        if (newTaskTitle.trim() === '') {\r\n            setError('Title is required');\r\n            return\r\n        }\r\n        props.addItem(newTaskTitle);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input className={error ? obj.error : ''} onKeyPress={onEnterPressHandler} onChange={onChangeInputHandler}*/}\r\n            {/*       value={newTaskTitle}/>*/}\r\n            <TextField id=\"standard-basic\"\r\n                       label=\"Type text\"\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       onKeyPress={onEnterPressHandler}\r\n                       onChange={onChangeInputHandler}\r\n                       value={newTaskTitle}\r\n            />\r\n            {/*<button className={obj.add_btn} onClick={onClickAddHandler}>+</button>*/}\r\n            <IconButton\r\n                color={\"primary\"}\r\n                className={obj.add_btn}\r\n                onClick={onClickAddHandler}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={obj.error_message}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('editableSpan')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onSpanDblClick = () => {\r\n        setTitle(props.title);\r\n        setEditMode(true);\r\n    }\r\n    const onInputBlur = () => {\r\n        setEditMode(false);\r\n        if (title.trim()) {\r\n            props.onChangeTitle(title);\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <TextField autoFocus value={title} onChange={onInputChange} onBlur={onInputBlur}/>\r\n                    :\r\n                    <span onDoubleClick={onSpanDblClick}>{props.title}</span>\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport obj from \"../ToDoList.module.css\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/TodoListsAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    todoListId: string\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    task: TaskType\r\n    filter: 'all' | 'completed' | 'active'\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n\r\n    const onRemoveTaskHandler = useCallback(() => props.removeTask(props.task.id, props.todoListId),\r\n        [props.removeTask, props.task.id, props.todoListId]);\r\n    const onChangeCheckBoxHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId),\r\n        [props.changeTaskStatus, props.task.id, props.todoListId])\r\n\r\n    const onChangeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\r\n    return (\r\n        <div className={props.filter !== 'completed' && props.task.status===TaskStatuses.Completed ? obj.is_done : ''}>\r\n            <Checkbox\r\n                checked={props.task.status===TaskStatuses.Completed}\r\n                onChange={onChangeCheckBoxHandler}\r\n                value=\"checkedA\"\r\n                inputProps={{'aria-label': 'Checkbox A'}}\r\n            />\r\n            <EditableSpan title={props.task.title} onChangeTitle={onChangeTitle}/>\r\n            <IconButton onClick={onRemoveTaskHandler} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/TodoListsAPI\";\r\nimport {fetchTodoListsThunkCreator, FilterValueType} from \"../../../state/todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksThunkCreator} from \"../../../state/tasksReducer\";\r\n\r\n\r\nexport type PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValueType, id: string) => void\r\n    filter: FilterValueType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n    addTask: (title: string, id: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    console.log('todoList')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunkCreator(props.id));\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id]);\r\n    const onRemoveTodoListClickHandler = useCallback(() => props.removeTodoList(props.id), [props.removeTodoList, props.id])\r\n    const onChangeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(props.id, title), [props.changeTodoListTitle, props.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id]);\r\n\r\n\r\n    let tasksForToDoList = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return t.status === TaskStatuses.New\r\n        });\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return t.status === TaskStatuses.Completed\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodoListClickHandler} aria-label=\"delete\">\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(t => {\r\n                        return <Task key={t.id}\r\n                                     task={t}\r\n                                     changeTaskStatus={props.changeTaskStatus}\r\n                                     changeTaskTitle={props.changeTaskTitle}\r\n                                     filter={props.filter}\r\n                                     removeTask={props.removeTask}\r\n                                     todoListId={props.id}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"}\r\n                        variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../state/store\";\r\nimport {\r\n    addTodoListThunkCreator,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleThunkCreator,\r\n    fetchTodoListsThunkCreator,\r\n    FilterValueType,\r\n    removeTodoListThunkCreator,\r\n    TodoListDomainType\r\n} from \"../../state/todolistsReducer\";\r\nimport {addTaskThunkCreator, removeTaskThunkCreator, updateTaskThunkCreator} from \"../../state/tasksReducer\";\r\nimport {TaskStatuses} from \"../../api/TodoListsAPI\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./TodoList/ToDoList\";\r\nimport {TasksStateType} from \"../../app/App\";\r\n\r\n\r\ntype TodoListsListPropsType = {}\r\n\r\n\r\n\r\nconst TodoLists: React.FC<TodoListsListPropsType> = (props) => {\r\n\r\n    const todoLists = useSelector<AppRootType, Array<TodoListDomainType>>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsThunkCreator());\r\n    }, [])\r\n\r\n\r\n    const changeFilter = useCallback((value: FilterValueType, id: string) => {\r\n        dispatch(changeTodoListFilterAC(id, value))\r\n    }, [dispatch]);\r\n    const removeTodoList = useCallback((id: string) => {\r\n        let action = removeTodoListThunkCreator(id)\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        let action = addTodoListThunkCreator(todoListTitle);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((id: string, title: string) => {\r\n        dispatch(changeTodoListTitleThunkCreator(id, title))\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskThunkCreator(todoListId, title))\r\n    }, [dispatch]);\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        dispatch(removeTaskThunkCreator(todoListId, taskId))\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((id: string, title: string, todoListId: string) => {\r\n        dispatch(updateTaskThunkCreator(id, {title: title}, todoListId))\r\n    }, [dispatch]);\r\n\r\n    const changeTaskStatus = useCallback((id: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTaskThunkCreator(id, {status: status}, todoListId))\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '10px'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todoLists.map(tl => {\r\n\r\n                    let tasksForTodoList = tasks[tl.id];\r\n                    return (\r\n                        <Grid key={tl.id} item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist key={tl.id}\r\n                                          id={tl.id}\r\n                                          title={tl.title}\r\n                                          tasks={tasksForTodoList}\r\n                                          filter={tl.filter}\r\n                                          changeFilter={changeFilter}\r\n                                          removeTodoList={removeTodoList}\r\n                                          changeTodoListTitle={changeTodoListTitle}\r\n                                          addTask={addTask}\r\n                                          removeTask={removeTask}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n\r\n                    )\r\n\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoLists;","import React from 'react';\nimport './App.css';\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {TaskType} from \"../api/TodoListsAPI\";\nimport TodoLists from \"../features/TodoListsList/TodoListsList\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n\nconst App = React.memo(() => {\n    console.log('App')\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <TodoLists/>\n            </Container>\n        </div>\n    );\n})\n\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport App from \"./app/App\";\r\n\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    // </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ToDoList_error__2_s7a\",\"error_message\":\"ToDoList_error_message__2wJHE\",\"add_btn\":\"ToDoList_add_btn__15G-N\",\"filter_btn\":\"ToDoList_filter_btn__2gnWH\",\"active_filter\":\"ToDoList_active_filter__3hqwS\",\"is_done\":\"ToDoList_is_done__1wQHF\"};"],"sourceRoot":""}