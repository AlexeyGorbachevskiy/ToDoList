{"version":3,"sources":["serviceWorker.ts","api/TodoListsAPI.ts","state/todolistsReducer.ts","state/tasksReducer.ts","state/store.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/ToDoList.tsx","App.tsx","index.tsx","components/ToDoList.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","todoListId","initialState","v1","rootReducer","combineReducers","todoLists","state","action","type","filter","t","id","title","addedDate","order","todoList","find","tl","value","map","tasks","stateCopy","filteredTasks","taskElement","newTask","newTaskTitle","status","New","description","priority","Low","startDate","deadline","newTasks","todoListTasks","forEach","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","console","log","useState","setNewTaskTitle","error","setError","onClickAddHandler","trim","addItem","TextField","label","helperText","onKeyPress","e","charCode","onChange","currentTarget","IconButton","color","className","obj","add_btn","onClick","ControlPoint","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onChangeTitle","onDoubleClick","Task","onRemoveTaskHandler","useCallback","removeTask","task","onChangeCheckBoxHandler","changeTaskStatus","checked","Completed","changeTaskTitle","is_done","Checkbox","inputProps","aria-label","Delete","Todolist","dispatch","useDispatch","useEffect","then","res","setTasksAC","data","items","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onRemoveTodoListClickHandler","removeTodoList","onChangeTodoListTitle","changeTodoListTitle","addTask","tasksForToDoList","key","Button","variant","App","useSelector","changeTodoListFilterAC","addTodoList","todoListTitle","changeTodoListTitleAC","removeTaskAC","changeTaskTitleAC","changeTaskStatusAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tasksForTodoList","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.8d6baa9c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport {UpdateTaskTitle} from \"../stories/TodoListsAPI.stories\";\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3de0712e-e19a-4637-bf5e-355c7a8ad46c'\r\n    }\r\n})\r\n\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\n\r\nexport const todoListsAPI = {\r\n\r\n    getTodoLists() {\r\n        return axiosInstance.get<TodoListType[]>('todo-lists')\r\n    },\r\n\r\n    createTodoList(title: string) {\r\n        return axiosInstance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n\r\n    deleteTodoList(todolistId: string) {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return axiosInstance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n\r\n    getTasks(todoListId: string) {\r\n        const promise = axiosInstance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n        return promise\r\n    },\r\n\r\n    createTask(todoListId: string, title: string) {\r\n        const promise = axiosInstance.post<ResponseType<TaskType>>(`todo-lists/${todoListId}/tasks`, {title: title});\r\n        return promise\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise = axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        const promise = axiosInstance.put<UpdateTaskType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n        return promise\r\n    },\r\n\r\n\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {todoListsAPI, TodoListType} from \"../api/TodoListsAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport let todoListId1 = v1();\r\nexport let todoListId2 = v1();\r\nconst initialState: Array<TodoListDomainType> = [\r\n    // {id: todoListId1, title: 'What to learn', filter: 'all'},\r\n    // {id: todoListId2, title: 'What to buy', filter: 'all'},\r\n]\r\n\r\nexport type FilterValueType = 'all' | 'completed' | 'active';\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValueType\r\n}\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    value: FilterValueType\r\n}\r\n\r\nexport type SetTodoListsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todoLists: TodoListType[]\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n    | SetTodoListsActionType;\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter((t: TodoListDomainType) => t.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [\r\n                {\r\n                    id: action.todoListId,\r\n                    title: action.title,\r\n                    filter: 'all',\r\n                    addedDate: '',\r\n                    order: 0,\r\n                },\r\n                ...state\r\n            ]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n            }\r\n            return [\r\n                ...state\r\n            ]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            let todoList = state.find(t => t.id === action.id);\r\n            if (todoList) {\r\n                todoList.filter = action.value;\r\n            }\r\n            return [\r\n                ...state\r\n\r\n            ]\r\n        }\r\n\r\n        case 'SET-TODOLISTS': {\r\n            return action.todoLists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    filter: 'all'\r\n                }\r\n            })\r\n        }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodoListAC = (todolistId: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodoListFilterAC = (id: string, value: FilterValueType): ChangeTodoListFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, value: value}\r\n}\r\n\r\nexport const setTodoListsAC = (todoLists: TodoListType[]): SetTodoListsActionType => {\r\n    return {type: 'SET-TODOLISTS', todoLists: todoLists}\r\n}\r\n\r\n\r\nexport const fetchTodoListsThunkCreator = () => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            todoListsAPI.getTodoLists()\r\n                .then((res) => {\r\n                    dispatch(setTodoListsAC(res.data))\r\n                })\r\n        }\r\n    )\r\n};\r\n\r\n","import {v1} from \"uuid\";\r\nimport {AddTodoListActionType, setTodoListsAC, SetTodoListsActionType} from \"./todolistsReducer\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListsAPI} from \"../api/TodoListsAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype StateType = TasksStateType\r\n\r\n\r\nconst initialState: StateType = {\r\n    // [todoListId1]: [\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //     {id: v1(), title: \"Redux\", isDone: false},\r\n    // ],\r\n    // [todoListId2]: [\r\n    //     {id: v1(), title: \"New\", isDone: false},\r\n    //     {id: v1(), title: \"Yahooo\", isDone: false},\r\n    //     {id: v1(), title: \"EEEEE\", isDone: true},\r\n    //     {id: v1(), title: \"Veeee\", isDone: false},\r\n    // ],\r\n}\r\n\r\ntype ActionTypes =\r\n    RemoveTaskACType\r\n    | AddTaskACType\r\n    | ChangeTaskStatusACType\r\n    | ChangeTaskTitleACType\r\n    | AddTodoListActionType\r\n    | RemoveTodolistACType\r\n    | SetTodoListsActionType\r\n    | SetTasksACType\r\n\r\n\r\nexport const tasksReducer = (state: StateType = initialState, action: ActionTypes): StateType => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todoListId];\r\n            const filteredTasks = tasks.filter(taskElement => action.id !== taskElement.id);\r\n            stateCopy[action.todoListId] = filteredTasks\r\n\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask = {\r\n                id: v1(),\r\n                title: action.newTaskTitle,\r\n                status: TaskStatuses.New,\r\n\r\n                description: '',\r\n                priority: TaskPriorities.Low,\r\n                startDate: '',\r\n                deadline: '',\r\n                todoListId: action.todoListId,\r\n                order: 0,\r\n                addedDate: '',\r\n            };\r\n            let newTasks = [newTask, ...stateCopy[action.todoListId]];\r\n            stateCopy[action.todoListId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todoListTasks = state[action.todoListId];\r\n            state[action.todoListId] = todoListTasks.map(t => t.id === action.id ? {...t, status: action.status} : t);\r\n            return ({...state})\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todoListTasks = state[action.todoListId];\r\n            state[action.todoListId] = todoListTasks.map(t => t.id === action.id ? {...t, title: action.title} : t);\r\n            return ({...state})\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = [];\r\n            })\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todoListId] = action.tasks;\r\n\r\n            return stateCopy\r\n        }\r\n\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport type RemoveTaskACType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListId: string\r\n}\r\nexport type AddTaskACType = {\r\n    type: 'ADD-TASK'\r\n    newTaskTitle: string\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskStatusACType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    id: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n}\r\nexport type ChangeTaskTitleACType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    id: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type RemoveTodolistACType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type SetTasksACType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todoListId: string\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskACType => {\r\n    return {type: 'REMOVE-TASK', id: id, todoListId: todoListId}\r\n}\r\nexport const addTaskAC = (newTaskTitle: string, todoListId: string): AddTaskACType => {\r\n    return {type: 'ADD-TASK', newTaskTitle: newTaskTitle, todoListId: todoListId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, status: TaskStatuses, todoListId: string): ChangeTaskStatusACType => {\r\n    return {type: 'CHANGE-TASK-STATUS', id: id, status: status, todoListId: todoListId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (id: string, title: string, todoListId: string): ChangeTaskTitleACType => {\r\n    return {type: 'CHANGE-TASK-TITLE', id: id, title: title, todoListId: todoListId}\r\n}\r\n\r\nexport const removeTodoListAC = (id: string): RemoveTodolistACType => {\r\n    return {type: 'REMOVE-TODOLIST', id: id}\r\n}\r\n\r\nexport const setTasksAC = (tasks: TaskType[], todoListId: string): SetTasksACType => {\r\n    return {type: 'SET-TASKS', tasks: tasks, todoListId: todoListId}\r\n}\r\n\r\n\r\nexport const fetchTasksThunkCreator = (todoListId: string) => {\r\n    return (\r\n        (dispatch: Dispatch) => {\r\n            todoListsAPI.getTasks(todoListId)\r\n                .then((res) => {\r\n                    dispatch(setTasksAC(res.data.items, todoListId))\r\n                })\r\n        }\r\n    )\r\n\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from \"./todolistsReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\n// type AppRootState={\r\n//     todoLists:Array<TodoListsType>,\r\n//     tasks:TasksStateType\r\n// }\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport obj from \"./ToDoList.module.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    console.log('AddItemForm')\r\n\r\n    let [newTaskTitle, setNewTaskTitle] = useState('');\r\n    let [error, setError] = useState<null | string>(null);\r\n\r\n    const onEnterPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            onClickAddHandler();\r\n        }\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        setNewTaskTitle(e.currentTarget.value);\r\n    }\r\n    const onClickAddHandler = () => {\r\n        setNewTaskTitle('');\r\n        if (newTaskTitle.trim() === '') {\r\n            setError('Title is required');\r\n            return\r\n        }\r\n        props.addItem(newTaskTitle);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input className={error ? obj.error : ''} onKeyPress={onEnterPressHandler} onChange={onChangeInputHandler}*/}\r\n            {/*       value={newTaskTitle}/>*/}\r\n            <TextField id=\"standard-basic\"\r\n                       label=\"Type text\"\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       onKeyPress={onEnterPressHandler}\r\n                       onChange={onChangeInputHandler}\r\n                       value={newTaskTitle}\r\n            />\r\n            {/*<button className={obj.add_btn} onClick={onClickAddHandler}>+</button>*/}\r\n            <IconButton\r\n                color={\"primary\"}\r\n                className={obj.add_btn}\r\n                onClick={onClickAddHandler}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={obj.error_message}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('editableSpan')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState('');\r\n\r\n    const onInputChange = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onSpanDblClick = () => {\r\n        setTitle(props.title);\r\n        setEditMode(true);\r\n    }\r\n    const onInputBlur = () => {\r\n        setEditMode(false);\r\n        if (title.trim()) {\r\n            props.onChangeTitle(title);\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <TextField autoFocus value={title} onChange={onInputChange} onBlur={onInputBlur}/>\r\n                    :\r\n                    <span onDoubleClick={onSpanDblClick}>{props.title}</span>\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport obj from \"./ToDoList.module.css\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../api/TodoListsAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    todoListId: string\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    task: TaskType\r\n    filter: 'all' | 'completed' | 'active'\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n\r\n    const onRemoveTaskHandler = useCallback(() => props.removeTask(props.task.id, props.todoListId),\r\n        [props.removeTask, props.task.id, props.todoListId]);\r\n    const onChangeCheckBoxHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId),\r\n        [props.changeTaskStatus, props.task.id, props.todoListId])\r\n\r\n    const onChangeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\r\n    return (\r\n        <div className={props.filter !== 'completed' && props.task.status===TaskStatuses.Completed ? obj.is_done : ''}>\r\n            <Checkbox\r\n                checked={props.task.status===TaskStatuses.Completed}\r\n                onChange={onChangeCheckBoxHandler}\r\n                value=\"checkedA\"\r\n                inputProps={{'aria-label': 'Checkbox A'}}\r\n            />\r\n            <EditableSpan title={props.task.title} onChangeTitle={onChangeTitle}/>\r\n            <IconButton onClick={onRemoveTaskHandler} aria-label=\"delete\">\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"../api/TodoListsAPI\";\r\nimport {fetchTodoListsThunkCreator, FilterValueType} from \"../state/todolistsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksThunkCreator} from \"../state/tasksReducer\";\r\n\r\n\r\nexport type PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValueType, id: string) => void\r\n    filter: FilterValueType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n    addTask: (title: string, id: string) => void\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    console.log('todoList')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunkCreator(props.id));\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id]);\r\n    const onRemoveTodoListClickHandler = useCallback(() => props.removeTodoList(props.id), [props.removeTodoList, props.id])\r\n    const onChangeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(props.id, title), [props.changeTodoListTitle, props.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id]);\r\n\r\n\r\n    let tasksForToDoList = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return t.status === TaskStatuses.New\r\n        });\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForToDoList = props.tasks.filter((t) => {\r\n            return t.status === TaskStatuses.Completed\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChangeTitle={onChangeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodoListClickHandler} aria-label=\"delete\">\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(t => {\r\n                        return <Task key={t.id}\r\n                                     task={t}\r\n                                     changeTaskStatus={props.changeTaskStatus}\r\n                                     changeTaskTitle={props.changeTaskTitle}\r\n                                     filter={props.filter}\r\n                                     removeTask={props.removeTask}\r\n                                     todoListId={props.id}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={\"primary\"} variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={\"secondary\"}\r\n                        variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {Todolist} from './components/ToDoList';\nimport AddItemForm from \"./components/AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {\n    addTodoListAC,\n    changeTodoListFilterAC,\n    changeTodoListTitleAC, fetchTodoListsThunkCreator, FilterValueType,\n    removeTodoListAC, TodoListDomainType,\n} from \"./state/todolistsReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootType} from \"./state/store\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasksReducer\";\nimport {TaskStatuses, TaskType, todoListsAPI} from \"./api/TodoListsAPI\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n\nconst App = React.memo(() => {\n    console.log('App')\n\n    const todoLists = useSelector<AppRootType, Array<TodoListDomainType>>(state => state.todoLists);\n    const tasks = useSelector<AppRootType, TasksStateType>(state => state.tasks);\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        dispatch(fetchTodoListsThunkCreator());\n    }, [])\n\n\n    const changeFilter = useCallback((value: FilterValueType, id: string) => {\n        dispatch(changeTodoListFilterAC(id, value))\n    }, [dispatch]);\n    const removeTodoList = useCallback((id: string) => {\n        let action = removeTodoListAC(id)\n        dispatch(action);\n    }, [dispatch]);\n    const addTodoList = useCallback((todoListTitle: string) => {\n        let action = addTodoListAC(todoListTitle);\n        dispatch(action);\n    }, [dispatch]);\n    const changeTodoListTitle = useCallback((id: string, title: string) => {\n        dispatch(changeTodoListTitleAC(id, title))\n    }, [dispatch]);\n\n    const addTask = useCallback((title: string, id: string) => {\n        dispatch(addTaskAC(title, id))\n    }, [dispatch]);\n    const removeTask = useCallback((id: string, todoListId: string) => {\n        dispatch(removeTaskAC(id, todoListId))\n    }, [dispatch]);\n    const changeTaskTitle = useCallback((id: string, title: string, todoListId: string) => {\n        dispatch(changeTaskTitleAC(id, title, todoListId))\n    }, [dispatch]);\n    const changeTaskStatus = useCallback((id: string, status: TaskStatuses, todoListId: string) => {\n        dispatch(changeTaskStatusAC(id, status, todoListId))\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: '10px'}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {todoLists.map(tl => {\n\n                        let tasksForTodoList = tasks[tl.id];\n                        return (\n                            <Grid key={tl.id} item>\n                                <Paper style={{padding: '10px'}}>\n                                    <Todolist key={tl.id}\n                                              id={tl.id}\n                                              title={tl.title}\n                                              tasks={tasksForTodoList}\n                                              filter={tl.filter}\n                                              changeFilter={changeFilter}\n                                              removeTodoList={removeTodoList}\n                                              changeTodoListTitle={changeTodoListTitle}\n                                              addTask={addTask}\n                                              removeTask={removeTask}\n                                              changeTaskTitle={changeTaskTitle}\n                                              changeTaskStatus={changeTaskStatus}\n                                    />\n                                </Paper>\n                            </Grid>\n\n                        )\n\n                    })}\n                </Grid>\n            </Container>\n        </div>\n    );\n})\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport App from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    // </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"ToDoList_error__q9bxq\",\"error_message\":\"ToDoList_error_message__uv9gU\",\"add_btn\":\"ToDoList_add_btn__3pzOX\",\"filter_btn\":\"ToDoList_filter_btn__18yEB\",\"active_filter\":\"ToDoList_active_filter__z5aGl\",\"is_done\":\"ToDoList_is_done__1LYDY\"};"],"sourceRoot":""}